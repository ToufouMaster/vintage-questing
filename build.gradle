buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.135'
	}
	repositories {
		mavenCentral()
	}
}

plugins {
	id 'fabric-loom' version '1.10.0-bta'
	id 'java'
	id 'maven-publish'
	//id "com.modrinth.minotaur" version "2.+"
}


import org.gradle.internal.os.OperatingSystem

project.ext.lwjglVersion = "3.3.3"

switch (OperatingSystem.current()) {
	case OperatingSystem.LINUX:
		project.ext.lwjglNatives = "natives-linux"
		break
	case OperatingSystem.WINDOWS:
		project.ext.lwjglNatives = "natives-windows"
		break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = "natives-macos"
}

group = project.mod_group
archivesBaseName = project.mod_name
version = project.mod_version

loom {
	noIntermediateMappings()
	customMinecraftMetadata.set("https://downloads.betterthanadventure.net/bta-client/${project.bta_channel}/v${project.bta_version}/manifest.json")
}

repositories {
	mavenCentral()
	maven { url = "https://jitpack.io" }
	maven {
		name = 'Babric'
		url = 'https://maven.glass-launcher.net/babric'
	}
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
	maven {
		name = 'SignalumMavenInfrastructure'
		url = 'https://maven.thesignalumproject.net/infrastructure'
	}
	maven {
		name = 'SignalumMavenReleases'
		url = 'https://maven.thesignalumproject.net/releases'
	}
	ivy {
		url = "https://github.com/Better-than-Adventure"
		patternLayout {
			artifact "[organisation]/releases/download/v[revision]/[module].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://downloads.betterthanadventure.net/bta-client/${project.bta_channel}/"
		patternLayout {
			artifact "/v[revision]/client.jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://downloads.betterthanadventure.net/bta-server/${project.bta_channel}/"
		patternLayout {
			artifact "/v[revision]/server.jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://piston-data.mojang.com"
		patternLayout {
			artifact "v1/[organisation]/[revision]/[module].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}

}

dependencies {
	minecraft "::${project.bta_version}"
	mappings loom.layered() {}

	modRuntimeOnly "objects:client:43db9b498cb67058d2e12d394e6507722e71bb45" // https://piston-data.mojang.com/v1/objects/43db9b498cb67058d2e12d394e6507722e71bb45/client.jar
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Helper library
	// If you do not need Halplibe you can comment this line out or delete this line
	modImplementation("turniplabs:halplibe:${project.halplibe_version}")

	modImplementation("turniplabs:modmenu-bta:${project.mod_menu_version}")

	// Catalyst
	implementation(project(path: ":core", configuration: "namedElements"))

	implementation "org.slf4j:slf4j-api:1.8.0-beta4"
	implementation "org.apache.logging.log4j:log4j-slf4j18-impl:2.16.0"

	implementation 'com.google.guava:guava:33.0.0-jre'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
	var log4jVersion = "2.20.0"
	implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
	implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
	implementation("org.apache.logging.log4j:log4j-1.2-api:${log4jVersion}")

	include(implementation("org.apache.commons:commons-lang3:3.12.0"))

	modImplementation("com.github.Better-than-Adventure:legacy-lwjgl3:1.0.5")
	implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

	runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
	implementation "org.lwjgl:lwjgl:$lwjglVersion"
	implementation "org.lwjgl:lwjgl-assimp:$lwjglVersion"
	implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion"
	implementation "org.lwjgl:lwjgl-openal:$lwjglVersion"
	implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion"
	implementation "org.lwjgl:lwjgl-stb:$lwjglVersion"
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	options.release.set 8
}

jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

configurations.configureEach {
	// Removes LWJGL2 dependencies
	exclude group: "org.lwjgl.lwjgl"
}

processResources {
	inputs.property "version", version

	filesMatching("fabric.mod.json") {
		expand "version": version
	}
}

remapJar {
	archiveVersion.set(archiveVersion.get()+"-${bta_version}")
}


publishing {
	if(checkVersion(project.mod_group,project.mod_name,project.mod_version)) {
		repositories {
			maven {
				name = "signalumMaven"
				url = "https://maven.thesignalumproject.net/releases"
				credentials(PasswordCredentials)
				authentication {
					basic(BasicAuthentication)
				}
			}
		}

		publications {
			maven(MavenPublication) {
				groupId = project.mod_group
				artifactId = project.mod_name
				version = project.mod_version
				from components.java
				println("Version ${project.mod_version} of ${project.mod_group}.${project.mod_name} ready for release!")
			}
		}
	}
}


import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

import java.nio.file.Files

tasks.register('github') {
	doLast {
		def github = GitHub.connectUsingOAuth(githubToken as String)
		def repository = github.getRepository("MartinSVK12/vintage-questing")

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("$version")
		releaseBuilder.body(Files.readString(java.nio.file.Path.of("${project.projectDir}/CHANGELOG.md")))
		releaseBuilder.commitish("7.3")
		releaseBuilder.prerelease(true)

		def release = releaseBuilder.create()
		release.uploadAsset(project.file(remapJar.getArchiveFile().get().getAsFile()),"application/java-archive")
		release.uploadAsset(project.file(remapSourcesJar.getArchiveFile().get().getAsFile()),"application/java-archive")
	}
}

static boolean checkVersion(String group, String name, String version) {
	try {
		def xml = new URL("https://maven.thesignalumproject.net/releases/${group}/${name}/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			System.err.println("Version ${version} of ${group}.${name} already exists!")
			return false
		}
		return true
	} catch (FileNotFoundException ignored){
		return true
	}
}
